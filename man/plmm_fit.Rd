% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plmm_fit.R
\name{plmm_fit}
\alias{plmm_fit}
\title{PLMM fit: a function that fits a PLMM using the values returned by plmm_prep()
This is an internal function for \code{cv.plmm}}
\usage{
plmm_fit(
  prep,
  penalty = c("MCP", "SCAD", "lasso"),
  gamma,
  alpha = 1,
  lambda.min,
  nlambda = 100,
  lambda,
  eps = 1e-04,
  max.iter = 10000,
  convex = TRUE,
  warn = TRUE,
  init = NULL,
  returnX = TRUE
)
}
\arguments{
\item{prep}{A list as returned from \code{plmm_prep}}

\item{penalty}{The penalty to be applied to the model. Either "MCP" (the default), "SCAD", or "lasso".}

\item{gamma}{The tuning parameter of the MCP/SCAD penalty (see details). Default is 3 for MCP and 3.7 for SCAD.}

\item{alpha}{Tuning parameter for the Mnet estimator which controls the relative contributions from the MCP/SCAD penalty and the ridge, or L2 penalty. alpha=1 is equivalent to MCP/SCAD penalty, while alpha=0 would be equivalent to ridge regression. However, alpha=0 is not supported; alpha may be arbitrarily small, but not exactly 0.}

\item{lambda.min}{The smallest value for lambda, as a fraction of lambda.max. Default is .001 if the number of observations is larger than the number of covariates and .05 otherwise.}

\item{nlambda}{Length of the sequence of lambda. Default is 100.}

\item{lambda}{A user-specified sequence of lambda values. By default, a sequence of values of length nlambda is computed, equally spaced on the log scale.}

\item{eps}{Convergence threshold. The algorithm iterates until the RMSD for the change in linear predictors for each coefficient is less than eps. Default is \code{1e-4}.}

\item{max.iter}{Maximum number of iterations (total across entire path). Default is 10000.}

\item{warn}{Return warning messages for failures to converge and model saturation? Default is TRUE.}

\item{init}{Initial values for coefficients. Default is 0 for all columns of X.}

\item{returnX}{Return the standardized design matrix along with the fit? By default, this option is turned on if X is under 100 MB, but turned off for larger matrices to preserve memory.}

\item{penalty.factor}{A multiplicative factor for the penalty applied to each coefficient. If supplied, penalty.factor must be a numeric vector of length equal to the number of columns of X. The purpose of penalty.factor is to apply differential penalization if some coefficients are thought to be more likely than others to be in the model. In particular, penalty.factor can be 0, in which case the coefficient is always in the model without shrinkage.}
}
\value{
A list with these components:
\itemize{
\item std_X: The standardized design matrix
\item SUX: first partial result of data rotation
\item SUy: second partial result of data rotation
\item eta: numeric value representing the ratio of variances.
\item std_SUX: re-standardized rotated design matrix. This is 'fed' into \code{plmm_fit()}.
\item b: The values returned in the 'beta' argument of the ncvfit() object
\item lambda: The sequence of lambda values used in model fitting
\item iter: The number of iterations at each given lambda value
\item converged: The convergence status at each given lambda value
\item penalty: The type of penalty used in model fitting
\item penalty.factor: A multiplicative factor for the penalty applied to each coefficient. If supplied, penalty.factor must be a numeric vector of length equal to the number of columns of X. The purpose of penalty.factor is to apply differential penalization if some coefficients are thought to be more likely than others to be in the model. In particular, penalty.factor can be 0, in which case the coefficient is always in the model without shrinkage.
\item ns: The indices of the non-singular columns of the ORIGINAL design matrix
\item ncol_X: The number of columns in the ORIGINAL design matrix
}
}
\description{
PLMM fit: a function that fits a PLMM using the values returned by plmm_prep()
This is an internal function for \code{cv.plmm}
}
\examples{
prep1 <- plmm_prep(X = admix$X, y = admix$y, trace = TRUE)
fit1 <- plmm_fit(prep = prep1)
}
\keyword{internal}
