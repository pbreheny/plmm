[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna C. Reisetter. Author, maintainer. Patrick J. Breheny. Author. Tabitha K. Peter. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reisetter , Breheny P (2022). penalizedLMM: Fit nonconvex-penalized linear mixed models account presence unobserved confounding effects. R package version 0.2.0.","code":"@Manual{,   title = {penalizedLMM: Fit nonconvex-penalized linear mixed models to account for the presence of unobserved confounding effects},   author = {Anna C. Reisetter and Patrick J. Breheny},   year = {2022},   note = {R package version 0.2.0}, }"},{"path":"/index.html","id":"welcome","dir":"","previous_headings":"","what":"Welcome","title":"Fit nonconvex-penalized linear mixed models to account for the presence of unobserved confounding effects","text":"penalizedLMM package contains functions fit penalized linear mixed models correct unobserved confounding effects. Documentation package progress.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit nonconvex-penalized linear mixed models to account for the presence of unobserved confounding effects","text":"install latest version package: description motivation functions package (along examples) refer second module GWAS data tutorial","code":"devtools::install_github(\"areisett/penalizedLMM\")"},{"path":"/reference/admix.html","id":null,"dir":"Reference","previous_headings":"","what":"Semi-simulated SNP data — admix","title":"Semi-simulated SNP data — admix","text":"dataset containing 100 SNPs, demographic variable representing race, simulated outcome","code":""},{"path":"/reference/admix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semi-simulated SNP data — admix","text":"","code":"admix"},{"path":"/reference/admix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Semi-simulated SNP data — admix","text":"list 3 components X SNP matrix (197 observations 100 SNPs) y vector simulated (continuous) outcomes race vector racial group categorization","code":""},{"path":"/reference/admix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Semi-simulated SNP data — admix","text":"https://hastie.su.domains/CASI/","code":""},{"path":"/reference/coef.cv.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coef method for ","title":"Coef method for ","text":"Coef method \"cv.plmm\" class","code":""},{"path":"/reference/coef.cv.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coef method for ","text":"","code":"# S3 method for cv.plmm coef(object, lambda, which = object$min, ...)"},{"path":"/reference/coef.cv.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coef method for ","text":"object object class \"cv.plmm.\" lambda numeric vector lambda values. Vector lambda indices coefficients return. Defaults lambda index minimum CVE. ... Additional arguments.","code":""},{"path":"/reference/coef.cv.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coef method for ","text":"","code":"cv_fit <- cv.plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used head(coef.cv.plmm(cv_fit)) #> Error in coef.cv.plmm(cv_fit): could not find function \"coef.cv.plmm\""},{"path":"/reference/coef.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coef method for ","title":"Coef method for ","text":"Coef method \"plmm\" class","code":""},{"path":"/reference/coef.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coef method for ","text":"","code":"# S3 method for plmm coef(object, lambda, which = 1:length(object$lambda), drop = TRUE, ...)"},{"path":"/reference/coef.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coef method for ","text":"object object class \"plmm.\" lambda numeric vector lambda values. Vector lambda indices coefficients return. drop Logical. ... Additional arguments.","code":""},{"path":"/reference/coef.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coef method for ","text":"","code":"fit <- plmm(admix$X, admix$y) (coef.plmm(fit)[1:10, 1:5]) #> Error in coef.plmm(fit): could not find function \"coef.plmm\""},{"path":"/reference/convexMin.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate index for which objective function ceases to be locally convex — convexMin","title":"Calculate index for which objective function ceases to be locally convex — convexMin","text":"Calculate index objective function ceases locally convex","code":""},{"path":"/reference/convexMin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate index for which objective function ceases to be locally convex — convexMin","text":"","code":"convexMin(b, X, penalty, gamma, l2, family = \"gaussian\", penalty.factor)"},{"path":"/reference/convexMin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate index for which objective function ceases to be locally convex — convexMin","text":"b Matrix coefficient values. X Design matrix. penalty penalty applied model. Either \"MCP\", \"SCAD\", \"lasso\". gamma tuning parameter MCP/SCAD penalty. Default 3 MCP 3.7 SCAD. l2 L2. family \"gaussian\" currently supported. penalty.factor multiplicative factor penalty applied coefficient. supplied, penalty.factor must numeric vector length equal number columns X. purpose penalty.factor apply differential penalization coefficients thought likely others model. particular, penalty.factor can 0, case coefficient always model without shrinkage.","code":""},{"path":"/reference/cv.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for plmm — cv.plmm","title":"Cross-validation for plmm — cv.plmm","text":"Performs k-fold cross validation lasso-, MCP-, SCAD-penalized penalized linear mixed models grid values regularization parameter lambda.","code":""},{"path":"/reference/cv.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for plmm — cv.plmm","text":"","code":"cv.plmm(   X,   y,   K,   type = c(\"response\", \"individual\"),   ...,   cluster,   nfolds = 10,   seed,   fold,   returnY = FALSE,   trace = FALSE )"},{"path":"/reference/cv.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for plmm — cv.plmm","text":"X Design matrix model fitting. May include clinical covariates non-SNP data. case, X_for_K supplied witha  matrix containing SNP data computation GRM. y Continuous outcome vector model fitting. K Known estimated similarity matrix. type character argument indicating returned predict.plmm. type == 'response' predictions based linear predictor, $X beta$. type == 'individual' predictions based linear predictor plus estimated random effect (BLUP). Defaults 'response'. ... Additional arguments plmm cluster cv.plmm can run parallel across cluster using parallel package. cluster must set advance using makeCluster function package. cluster must passed cv.plmm. nfolds number cross-validation folds. Default 10. seed may set seed random number generator order obtain reproducible results. fold fold observation belongs . default observations randomly assigned. returnY cv.plmm return linear predictors cross-validation folds? Default FALSE; TRUE, return matrix element row , column j fitted value observation fold observation excluded fit, jth value lambda. trace set TRUE, inform user progress announcing beginning CV fold. Default FALSE.","code":""},{"path":"/reference/cv.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validation for plmm — cv.plmm","text":"","code":"cv_fit <- cv.plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used"},{"path":"/reference/cvf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation internal function for cv.plmm — cvf","title":"Cross-validation internal function for cv.plmm — cvf","text":"Internal function cv.plmm calls plmm fold subset original data.","code":""},{"path":"/reference/cvf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation internal function for cv.plmm — cvf","text":"","code":"cvf(i, X, y, K, fold, type, cv.args, ...)"},{"path":"/reference/cvf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation internal function for cv.plmm — cvf","text":"Fold number excluded fit. X Design matrix. May include clinical covariates non-SNP data. case, X_for_K supplied witha  matrix containing SNP data computation GRM. y Original continuous outcome vector. K Known estimated similarity matrix. fold n-length vector fold-assignments. type character argument indicating returned predict.plmm. type == 'response' predictions based linear predictor, $X beta$. type == 'individual' predictions based linear predictor plus estimated random effect (BLUP). cv.args List additional arguments passed plmm. ... Optional arguments","code":""},{"path":"/reference/genDataPS.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data with population structure — sim_ps_dat","title":"Generate data with population structure — sim_ps_dat","text":"function allows simulate structured genetic data (SNP) unobserved environmental confounding effect.","code":""},{"path":"/reference/genDataPS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data with population structure — sim_ps_dat","text":"","code":"sim_ps_dat(   n = 200,   p = 1000,   p1 = floor(p/2),   nJ = rep(50, 4),   structureX = \"indep_subpops\",   Fst = NULL,   inbr = \"heterogeneous\",   structureGamma = c(\"dichotomous_discordant\"),   eta = 0.8,   xi = 0,   standardizeX = TRUE,   structureX_other = NULL,   sampleCols = TRUE,   B0 )"},{"path":"/reference/genDataPS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data with population structure — sim_ps_dat","text":"n Number observations/samples simulate. Defaults 200. p Number SNPs simulate. Defaults 1000. p1 Number SNPs causal. Defaults floor(p/2). nJ Number observations subpopulation. length nJ corresponds number subpopulations. Defaults rep(50, 4). structureX Type structure simulate. Fst desired final FST admixed individuals. Ranges 0 1. high FST implies greater differentiation among populations. Defaults 0.1 structureX = 1d_linear 0.2 structureX = indep_subpops. Otherwise defaults NULL. inbr Indicates whether desired inbreeding homogeneous heterogeneous. Defaults heterogeneous. structureGamma desired structure environmental confounding effect. Defaults 'dichotomous_discordant' eta desired proportion variance outcome attributable causal SNP effects. words, SNR. xi desired proportion non-signal variance outcome attributable unobserved environmental confounding effects. standardizeX generated X matrix standardized? Defaults TRUE. structureX_other structureX == \"\", matrix SnpMatrix object subjects rows SNPs columns used generate pseudophenotypes must supplied . sampleCols logical flag whether columns resultant X matrix scrambled. may desirable causal SNPs change one simulation next. Defaults TRUE. B0 Optional. Additional intercept value.","code":""},{"path":"/reference/genDataPS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data with population structure — sim_ps_dat","text":"list 7 elements: matrix SNP data (X), single-column matrix outcome values (y), single column matrix 'env', vector coefficients (beta), matrix Z values allocating environmental effects among subjects (Z), vector numeric values representing environmental effects (gamma), type structure used SNP data (structureX)","code":""},{"path":"/reference/genDataPS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data with population structure — sim_ps_dat","text":"","code":"sim_dat <- sim_ps_dat(structureX = \"1d_linear\") example_fit <- plmm(sim_dat$X, sim_dat$y, V = sim_dat$X%*%t(sim_dat$X))"},{"path":"/reference/genGammaUnscaled.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a vector of environmental confounding effects — sim_environ_eff","title":"Generate a vector of environmental confounding effects — sim_environ_eff","text":"function allows simulate environmental confounding effect. used sim_ps_dat(), scales generated vector order comply user specified desired variance outcome attributable environmental effect.","code":""},{"path":"/reference/genGammaUnscaled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a vector of environmental confounding effects — sim_environ_eff","text":"","code":"sim_environ_eff(structureGamma, J)"},{"path":"/reference/genGammaUnscaled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a vector of environmental confounding effects — sim_environ_eff","text":"structureGamma character argument describing desired structure. J Number subpopulations.","code":""},{"path":"/reference/genGammaUnscaled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a vector of environmental confounding effects — sim_environ_eff","text":"","code":"sim_environ_eff(structureGamma = \"linear_concordant\", J = 3) #> [1] 3 2 1"},{"path":"/reference/genRelatednessMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a relatedness matrix — relatedness_mat","title":"Generate a relatedness matrix — relatedness_mat","text":"function allows generate n n genetic relatedness matrix. numeric matrix supplied, RRM (Hayes, 2009) used computed XX'/p. character argument describes location prefix PLINK bed/bim/bam files supplied, GRM computed using GCTA method SNPrelate, unless another method specified optional argument.","code":""},{"path":"/reference/genRelatednessMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a relatedness matrix — relatedness_mat","text":"","code":"relatedness_mat(X, ...)"},{"path":"/reference/genRelatednessMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a relatedness matrix — relatedness_mat","text":"X Either numeric matrix genotypes (subjects rows, SNPs columns), character prefix PLINK bed/bim/fam files. ... Optional arguments case character prefix specified.","code":""},{"path":"/reference/genRelatednessMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a relatedness matrix — relatedness_mat","text":"","code":"RRM <- relatedness_mat(X = scale(admix$X))"},{"path":"/reference/genXps.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an X matrix with population structure — sim_ps_x","title":"Generate an X matrix with population structure — sim_ps_x","text":"function allows simulate structured genetic data (SNP).","code":""},{"path":"/reference/genXps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an X matrix with population structure — sim_ps_x","text":"","code":"sim_ps_x(   n,   nJ,   p,   structureX = c(\"admixture\", \"indep_subpops\", \"1d_linear\", \"1d_circular\",     \"independent\", \"other\"),   Fst = NULL,   inbr = c(\"homogeneous\", \"heterogeneous\"),   standardizeX = TRUE,   plot = FALSE,   structureX_other = NULL,   sampleCols = TRUE )"},{"path":"/reference/genXps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an X matrix with population structure — sim_ps_x","text":"n Number observations/samples simulate. nJ Number observations subpopulation. length nJ corresponds number subpopulations. p Number SNPs simulate. structureX Type structure simulate. Fst desired final FST admixed individuals. Ranges 0 1. high Fst implies greater differentiation among populations. Defaults 0.1 structureX = 1d_linear 0.2 structureX = indep_subpops. Otherwise defaults NULL. inbr Indicates whether desired inbreeding homogeneous heterogeneous. Defaults heterogeneous. standardizeX generated X matrix standardized? Defaults TRUE. plot plot kinship matrix generated? Defaults FALSE. structureX_other structureX == \"\", matrix SnpMatrix object subjects rows SNPs columns used generate pseudophenotypes must supplied . sampleCols logical flag whether columns resultant X matrix scrambled. may desirable causal SNPs change one simulation next. Defaults TRUE.","code":""},{"path":"/reference/genXps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an X matrix with population structure — sim_ps_x","text":"","code":"sim_X <- sim_ps_x(n = 200, nJ = rep(100, 2), p = 1000, structureX = \"indep_subpops\", inbr = \"heterogeneous\")"},{"path":"/reference/gic.html","id":null,"dir":"Reference","previous_headings":"","what":"General information criterion method of selecting lambda for ","title":"General information criterion method of selecting lambda for ","text":"General information criterion method selecting lambda \"plmm\" class","code":""},{"path":"/reference/gic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General information criterion method of selecting lambda for ","text":"","code":"gic(fit, ic = c(\"bic\", \"hdbic\"), SUX, SUy, S, eta)"},{"path":"/reference/gic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General information criterion method of selecting lambda for ","text":"fit object class \"plmm.\" ic Information criterion used select lambda. Currently supports BIC HDBIC. Defaults BIC. SUX Rotated design matrix including rotated intercept unpenalized columns, present. returned part plmm returnX == FALSE, must supplied explicitly. SUy Rotated outcome vector. returned part plmm returnX == FALSE, must supplied explicitly. S Eigenvalues similarity matrix used model fitting. returned part plmm returnX == FALSE, must supplied explicitly. eta Estimated $eta$ value object fit.","code":""},{"path":"/reference/gic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General information criterion method of selecting lambda for ","text":"","code":"fit <- plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) gic_res <- gic(fit = fit, ic = \"bic\", SUX = fit$SUX, SUy = fit$SUy, S = fit$S, eta = fit$eta) #> Warning: number of items to replace is not a multiple of replacement length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length names(gic_res) #> [1] \"fit\"            \"lambda\"         \"nzero\"          \"gic\"            #> [5] \"lambda.min\"     \"lambda.min.idx\" range(gic_res$gic, na.rm = T) # NAs will result from monomorphic SNPs #> [1]  712.3232 1538.3900"},{"path":"/reference/lamNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate nicely formatted lambda vec — lamNames","title":"Generate nicely formatted lambda vec — lamNames","text":"Generate nicely formatted lambda vec","code":""},{"path":"/reference/lamNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate nicely formatted lambda vec — lamNames","text":"","code":"lamNames(l)"},{"path":"/reference/lamNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate nicely formatted lambda vec — lamNames","text":"l Vector lambda values.","code":""},{"path":"/reference/lamNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate nicely formatted lambda vec — lamNames","text":"character vector formatted lambda value names","code":""},{"path":"/reference/lamNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate nicely formatted lambda vec — lamNames","text":"","code":"l <- c(1, 0.1, 0.01, 0.001)  lamNames(l) #> [1] \"1.0000\" \"0.1000\" \"0.0100\" \"0.0010\""},{"path":"/reference/lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a linear model with lasso regularization — lasso","title":"Fit a linear model with lasso regularization — lasso","text":"function allows fit linear model via lasso-penalized maximum likelihood output values lmm_lasso_eta. Primarily used simulation comparison lmm_lasso_eta.","code":""},{"path":"/reference/lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a linear model with lasso regularization — lasso","text":"","code":"lasso(X, y, p1, ...)"},{"path":"/reference/lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a linear model with lasso regularization — lasso","text":"X Design matrix. y Continuous outcome vector. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. ... Additional optional arguments","code":""},{"path":"/reference/lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a linear model with lasso regularization — lasso","text":"","code":"lasso_fit <- lasso(admix$X, admix$y, p1 = 5) s <- summary(lasso_fit)"},{"path":"/reference/lasso_pca10.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a linear model with lasso regularization and PC adjutment — lasso_pca10","title":"Fit a linear model with lasso regularization and PC adjutment — lasso_pca10","text":"function allows fit linear model via lasso-penalized maximum likelihood, adjusted first 10 principal components (unpenalized), output values lmm_lasso_eta. Primarily used simulation comparison lmm_lasso_eta.","code":""},{"path":"/reference/lasso_pca10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a linear model with lasso regularization and PC adjutment — lasso_pca10","text":"","code":"lasso_pca10(X, y, p1, ...)"},{"path":"/reference/lasso_pca10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a linear model with lasso regularization and PC adjutment — lasso_pca10","text":"X Design matrix. y Continuous outcome vector. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. ... Additional optional arguments","code":""},{"path":"/reference/lasso_pca10.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a linear model with lasso regularization and PC adjutment — lasso_pca10","text":"","code":"fit <- lasso_pca10(admix$X, admix$y, p1 = 5) summary(fit) #>         Length Class  Mode    #> fit      12    elnet  list    #> nonzero   1    -none- numeric #> coef    100    -none- numeric #> delta     1    -none- logical #> eta       1    -none- logical"},{"path":"/reference/lmm_ggmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a linear mixed model with lasso regularization — lmm_ggmix","title":"Fit a linear mixed model with lasso regularization — lmm_ggmix","text":"function allows fit linear mixed model via lasso-penalized maximum likelihood.","code":""},{"path":"/reference/lmm_ggmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a linear mixed model with lasso regularization — lmm_ggmix","text":"","code":"lmm_ggmix(X, y, p1, standardize = FALSE, K = NULL)"},{"path":"/reference/lmm_ggmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a linear mixed model with lasso regularization — lmm_ggmix","text":"X Design matrix. y Continuous outcome vector. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. standardize standardization performed within glmnet()? Defaults FALSE. K Matrix used compute similarity matrix, K. multi-chromosome analysis may supplied order perform leave-one-chromosome-correction. objective adjust population stratification unobserved confounding without rotating causal SNP effects. Default \\(\\frac{1}{p} XX^T\\)","code":""},{"path":"/reference/lmm_ggmix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a linear mixed model with lasso regularization — lmm_ggmix","text":"","code":"lmm_ggmix_fit <- lmm_ggmix(X = admix$X, y = admix$y, p1 = 10, K = relatedness_mat(admix$X))"},{"path":"/reference/lmm_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a penalizedLMM with lasso regularization — lmm_lasso","title":"Fit a penalizedLMM with lasso regularization — lmm_lasso","text":"function allows fit linear mixed model via lasso-penalized maximum likelihood.","code":""},{"path":"/reference/lmm_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a penalizedLMM with lasso regularization — lmm_lasso","text":"","code":"lmm_lasso(X, y, p1, standardize = FALSE, K = NULL)"},{"path":"/reference/lmm_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a penalizedLMM with lasso regularization — lmm_lasso","text":"X Design matrix. y Continuous outcome vector. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. standardize standardization performed within glmnet()? Defaults FALSE. K Matrix used compute similarity matrix, K. multi-chromosome analysis may supplied order perform leave-one-chromosome-correction. objective adjust population stratification unobserved confounding without rotating causal SNP effects. Default \\(\\frac{1}{p} XX^T\\)","code":""},{"path":"/reference/lmm_lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a penalizedLMM with lasso regularization — lmm_lasso","text":"","code":"fit <- lmm_lasso(X = admix$X, y = admix$y, p1 = 10, K = relatedness_mat(admix$X))"},{"path":"/reference/logLik.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"function allows evaluate negtive log-likelihood linear mixed model assumption null model order estimate variance parameter, eta.","code":""},{"path":"/reference/logLik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"","code":"logLik(eta, Uy, S)"},{"path":"/reference/logLik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"eta proportion variance outcome attributable causal SNP effects. words, SNR. Sometimes referred narrow-sense heritability. Uy continuous outcome, y, rotated eigenvectors similarity matrix, K. S eigenvalues similarity matrix, K.","code":""},{"path":"/reference/logLik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"","code":"admix$K <- relatedness_mat(admix$X) # create an estimated covariance matrix  ev <- eigen(admix$K) U <- ev$vectors fit <- plmm(X = admix$X, y = admix$y, K = admix$K) (logLik(eta = fit$eta, Uy = U%*%admix$y, S = ev$values )) #> [1] 468.6181"},{"path":"/reference/logLik_nonnull.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"Evaluate negative log-likelihood non-null Gaussian plmm model","code":""},{"path":"/reference/logLik_nonnull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"","code":"logLik_nonnull(fit, SUX, SUy, S, eta)"},{"path":"/reference/logLik_nonnull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"fit object class plmm_fit. SUX Rotated design matrix including rotated intercept unpenalized columns, present. SUy Rotated outcome vector. S Eigenvalues similarity matrix used model fitting. eta Estimated $eta$ value object fit.","code":""},{"path":"/reference/logLik_nonnull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"","code":"admix$K <- relatedness_mat(admix$X) # create an estimated covariance matrix  my_fit <- plmm(X = admix$X, y = admix$y, K = admix$K) LL <- logLik_nonnull(fit = my_fit, SUX = my_fit$SUX, SUy = my_fit$SUy,  S = my_fit$S, eta = my_fit$eta) #> Warning: number of items to replace is not a multiple of replacement length head(LL) #> [1] -350.8784 -350.8784 -350.8784 -350.8784 -350.8784 -350.8784 # See pp. 16-18 in A.R.'s thesis for details"},{"path":"/reference/loss.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss method for ","title":"Loss method for ","text":"Loss method \"plmm\" class","code":""},{"path":"/reference/loss.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss method for ","text":"","code":"loss.plmm(y, yhat)"},{"path":"/reference/loss.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss method for ","text":"y Observed response vector yhat Predicted response vector","code":""},{"path":"/reference/loss.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss method for ","text":"","code":"fit <- plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) yhat <- predict(object = fit, newX = admix$X, type = 'response', lambda = 0.05) head(loss.plmm(yhat = yhat, y = admix$y)) #> [1] 1.79694360 0.02510045 0.98140948 5.56500405 0.08041849 0.09550956"},{"path":"/reference/plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a linear mixed model with non-convex regularization — plmm","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"function allows fit linear mixed model via non-convex penalized maximum likelihood.","code":""},{"path":"/reference/plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"","code":"plmm(   X,   y,   K,   eta_star,   penalty = c(\"MCP\", \"SCAD\", \"lasso\"),   gamma,   alpha = 1,   lambda.min,   nlambda = 100,   lambda,   eps = 1e-04,   max.iter = 10000,   convex = TRUE,   dfmax = p + 1,   warn = TRUE,   penalty.factor = rep(1, ncol(X)),   init = rep(0, ncol(X)),   returnX = TRUE )"},{"path":"/reference/plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"X Design matrix. May include clinical covariates non-SNP data. y Continuous outcome vector. K Similarity matrix used rotate data. either known matrix reflects covariance y, estimate (Default \\(\\frac{1}{p}(XX^T)\\)). eta_star Optional argument input specific eta term rather estimate data. K known covariance matrix full rank, 1. penalty penalty applied model. Either \"MCP\" (default), \"SCAD\", \"lasso\". gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda.min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. nlambda Length sequence lambda. Default 100. lambda user-specified sequence lambda values. default, sequence values length nlambda computed, equally spaced log scale. eps Convergence threshold. algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max.iter Maximum number iterations (total across entire path). Default 10000. convex Calculate index objective function ceases locally convex? Default TRUE. dfmax Upper bound number nonzero coefficients. Default upper bound. However, large data sets, computational burden may heavy models large number nonzero coefficients. warn Return warning messages failures converge model saturation? Default TRUE. penalty.factor multiplicative factor penalty applied coefficient. supplied, penalty.factor must numeric vector length equal number columns X. purpose penalty.factor apply differential penalization coefficients thought likely others model. particular, penalty.factor can 0, case coefficient always model without shrinkage. init Initial values coefficients. Default 0 columns X. returnX Return standardized design matrix along fit? default, option turned X 100 MB, turned larger matrices preserve memory.","code":""},{"path":"/reference/plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"list including estimated coeficients original scale, well model fitting details","code":""},{"path":"/reference/plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"","code":"fit <- plmm(X = admix$X[,1:10], y = admix$y, K = relatedness_mat(admix$X)) summary(fit) #> The lambda value that minimizes loss:  0.0005181608  #> The model converged  #> # of coefficients estimated:  11  #> # of non-zero coefficients:  6  #> The predictors included in the model are:  Snp1 Snp2 Snp4 Snp5 Snp9 Snp10  #> The monomorphic SNPs were:  Snp8  #> $best_lam_idx #> [1] 100 #>  #> $best_lam #> [1] 0.0005181608 #>  #> $select_beta_vals #>  (Intercept)         Snp1         Snp2         Snp3         Snp4         Snp5  #> -0.472631419  0.418618832  0.052461015 -1.809189991  0.294588295  0.134216366  #>         Snp6         Snp7         Snp8         Snp9        Snp10  #> -0.274122107 -0.128452861  0.000000000  0.001992861  0.320635048  #>  #> $chosen_predictors #> [1] \"Snp1\"  \"Snp2\"  \"Snp4\"  \"Snp5\"  \"Snp9\"  \"Snp10\" #>  #> $monomorphic_snps #> [1] \"Snp8\" #>  short_summary <- summary(fit) #> The lambda value that minimizes loss:  0.0005181608  #> The model converged  #> # of coefficients estimated:  11  #> # of non-zero coefficients:  6  #> The predictors included in the model are:  Snp1 Snp2 Snp4 Snp5 Snp9 Snp10  #> The monomorphic SNPs were:  Snp8"},{"path":"/reference/plmm_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a penalizedLMM with lasso regularization using penalizedLMM — plmm_lasso","title":"Fit a penalizedLMM with lasso regularization using penalizedLMM — plmm_lasso","text":"function allows fit linear mixed model via penalized maximum likelihood null model variance component estimation.","code":""},{"path":"/reference/plmm_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a penalizedLMM with lasso regularization using penalizedLMM — plmm_lasso","text":"","code":"plmm_lasso(X, y, K, p1, ...)"},{"path":"/reference/plmm_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a penalizedLMM with lasso regularization using penalizedLMM — plmm_lasso","text":"X Design matrix. y Continuous outcome vector. K Similarity matrix. multi-chromosome analysis may supplied order perform leave-one-chromosome-correction. objective adjust population stratification unobserved confounding without rotating causal SNP effects. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. ... Additional optional arguments","code":""},{"path":"/reference/plmm_lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a penalizedLMM with lasso regularization using penalizedLMM — plmm_lasso","text":"","code":"RRM <- relatedness_mat(X = scale(admix$X)) fit <- plmm_lasso(X = admix$X, y = admix$y, K = RRM, p1 = 10) s <- summary(fit)"},{"path":"/reference/plmm_mcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a penalizedLMM with MCP regularization using penalizedLMM — plmm_mcp","title":"Fit a penalizedLMM with MCP regularization using penalizedLMM — plmm_mcp","text":"function allows fit linear mixed model via penalized maximum likelihood null model variance component estimation.","code":""},{"path":"/reference/plmm_mcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a penalizedLMM with MCP regularization using penalizedLMM — plmm_mcp","text":"","code":"plmm_mcp(X, y, p1, standardize = FALSE, K, ...)"},{"path":"/reference/plmm_mcp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a penalizedLMM with MCP regularization using penalizedLMM — plmm_mcp","text":"X Design matrix. y Continuous outcome vector. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. standardize standardization performed within glmnet()? Defaults FALSE. K Similarity matrix. multi-chromosome analysis may supplied order perform leave-one-chromosome-correction. objective adjust population stratification unobserved confounding without rotating causal SNP effects. ... arguments plmm()","code":""},{"path":"/reference/plmm_mcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a penalizedLMM with MCP regularization using penalizedLMM — plmm_mcp","text":"","code":"plmm_mcp_fit <- plmm_mcp(admix$X, admix$y, p1 = 5) s <- summary(plmm_mcp_fit)"},{"path":"/reference/plmm_nll.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"function allows evaluate negtive log-likelihood linear mixed model assumption null model order estimate variance parameter, eta.","code":""},{"path":"/reference/plmm_nll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"","code":"logLik(eta, Uy, S)"},{"path":"/reference/plmm_nll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"eta proportion variance outcome attributable causal SNP effects. words, SNR. Sometimes referred narrow-sense heritability. Uy continuous outcome, y, rotated eigenvectors similarity matrix, K. S eigenvalues similarity matrix, K.","code":""},{"path":"/reference/plmm_nll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the negative log-likelihood of a null Gaussian penalizedLMM model — logLik","text":"","code":"admix$V <- admix$X%*%t(admix$X) # create an estimated covariance matrix  # NB: this is an estimate of K  ev <- eigen(admix$V) U <- ev$vectors fit <- plmm(X = admix$X, y = admix$y, V = admix$V, penalty = \"MCP\") (logLik(eta = fit$eta, Uy = U%*%admix$y, S = ev$values )) #> [1] 570.0963"},{"path":"/reference/plmm_nll_nonnull.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"Evaluate negative log-likelihood non-null Gaussian plmm model","code":""},{"path":"/reference/plmm_nll_nonnull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"","code":"logLik_nonnull(fit, SUX, SUy, S, eta)"},{"path":"/reference/plmm_nll_nonnull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"fit object class plmm_fit. SUX Rotated design matrix including rotated intercept unpenalized columns, present. SUy Rotated outcome vector. S Eigenvalues similarity matrix used model fitting. eta Estimated $eta$ value object fit.","code":""},{"path":"/reference/plmm_nll_nonnull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the negative log-likelihood of a non-null Gaussian plmm model — logLik_nonnull","text":"","code":"admix$K <- (1/nrow(admix$X))*tcrossprod(admix$X, admix$X) # create an estimated covariance matrix  # NB: this is an estimate of K  K_svd <- svd(K) #> Error in as.matrix(x): object 'K' not found U <- K_svd$u #> Error in eval(expr, envir, enclos): object 'K_svd' not found D <- K_svd$d #> Error in eval(expr, envir, enclos): object 'K_svd' not found # WORK IN PROGRESS #FIXME need to iron out this example # See pp. 16-18 in A.R.'s thesis  ev <- eigen(admix$V) #> Error in array(x, c(length(x), 1L), if (!is.null(names(x))) list(names(x),     NULL) else NULL): 'data' must be of a vector type, was 'NULL' U <- ev$vectors #> Error in eval(expr, envir, enclos): object 'ev' not found S <- ev$values #> Error in eval(expr, envir, enclos): object 'ev' not found UX <- U%*%admix$X #> Error in eval(expr, envir, enclos): object 'U' not found Uy <- U%*%admix$y #> Error in eval(expr, envir, enclos): object 'U' not found fit <- plmm(X = admix$X, y = admix$y, V = admix$V, penalty = \"MCP\") (logLik_nonnull(fit = my_fit, SUX = S%*%UX, SUy = S%*%admix$y, S = S, eta = my_fit$eta)) #> Error in logLik_nonnull(fit = my_fit, SUX = S %*% UX, SUy = S %*% admix$y,     S = S, eta = my_fit$eta): object 'S' not found"},{"path":"/reference/plmm_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate eta using a null Gaussian penalizedLMM model — plmm_null","title":"Estimate eta using a null Gaussian penalizedLMM model — plmm_null","text":"function allows estimate eta (signal noise ratio, narrow-sense variability) assumption null model.","code":""},{"path":"/reference/plmm_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate eta using a null Gaussian penalizedLMM model — plmm_null","text":"","code":"plmm_null(y, X = NULL, K = NULL)"},{"path":"/reference/plmm_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate eta using a null Gaussian penalizedLMM model — plmm_null","text":"y Continuous outcome vector. supplied, K treated known eta estimated. X matrix SNP data. K supplied, X required. K Estimated known similarity matrix. default, K realized relationship matrix, \\(\\frac{1}{p}XX^T\\), \\(p\\) number columns X","code":""},{"path":"/reference/plmm_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate eta using a null Gaussian penalizedLMM model — plmm_null","text":"","code":"res <- plmm_null(y = admix$y, X = admix$X) (res$eta) # estimate of eta  #> [1] 0.5110618"},{"path":"/reference/plmm_scad.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a penalizedLMM with SCAD regularization using penalizedLMM — plmm_scad","title":"Fit a penalizedLMM with SCAD regularization using penalizedLMM — plmm_scad","text":"function allows fit linear mixed model via penalized maximum likelihood null model variance component estimation.","code":""},{"path":"/reference/plmm_scad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a penalizedLMM with SCAD regularization using penalizedLMM — plmm_scad","text":"","code":"plmm_scad(X, y, p1, standardize = FALSE, K)"},{"path":"/reference/plmm_scad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a penalizedLMM with SCAD regularization using penalizedLMM — plmm_scad","text":"X Design matrix. y Continuous outcome vector. p1 Number causal SNPs. Lambda selected <= p1 variables enter model. standardize standardization performed within glmnet()? Defaults FALSE. K Similarity matrix. multi-chromosome analysis may supplied order perform leave-one-chromosome-correction. objective adjust population stratification unobserved confounding without rotating causal SNP effects.","code":""},{"path":"/reference/plmm_scad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a penalizedLMM with SCAD regularization using penalizedLMM — plmm_scad","text":"","code":"RRM <- relatedness_mat(X = scale(admix$X)) fit_scad <- plmm_scad(X = admix$X, y = admix$y, p1 = 5, K = RRM) s <- summary(fit_scad)"},{"path":"/reference/plot.cv.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for cv.plmm class — plot.cv.plmm","title":"Plot method for cv.plmm class — plot.cv.plmm","text":"Plot method cv.plmm class","code":""},{"path":"/reference/plot.cv.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for cv.plmm class — plot.cv.plmm","text":"","code":"# S3 method for cv.plmm plot(   x,   log.l = TRUE,   type = c(\"cve\", \"rsq\", \"scale\", \"snr\", \"all\"),   selected = TRUE,   vertical.line = TRUE,   col = \"red\",   ... )"},{"path":"/reference/plot.cv.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for cv.plmm class — plot.cv.plmm","text":"x object class cv.plmm log.l Logical indicate plot returned natural log scale. Defaults log.l = FALSE. type Type plot return. Defaults \"cve.\" selected Logical indicate variables plotted. Defaults TRUE. vertical.line Logical indicate whether vertical line plotted minimum/maximum value. Defaults TRUE. col Color vertical line, plotted. Defaults \"red.\" ... Additional arguments.","code":""},{"path":"/reference/plot.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for plmm class — plot.plmm","title":"Plot method for plmm class — plot.plmm","text":"Plot method plmm class","code":""},{"path":"/reference/plot.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for plmm class — plot.plmm","text":"","code":"# S3 method for plmm plot(x, alpha = 1, log.l = FALSE, shade = TRUE, col, ...)"},{"path":"/reference/plot.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for plmm class — plot.plmm","text":"x object class plmm alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. log.l Logical indicate plot returned natural log scale. Defaults log.l = FALSE. shade Logical indicate whether local nonconvex region shaded. Defaults TRUE. col Vector colors coefficient lines. ... Additional arguments.","code":""},{"path":"/reference/plot.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for plmm class — plot.plmm","text":"","code":"fit <- plmm(admix$X[,1:10], admix$y, nlambda = 10) # for the sake of illustration, I consider only 10 SNPs in the plot  plot(fit)  plot(fit, log.l = TRUE)"},{"path":"/reference/predict.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for plmm class — predict.plmm","title":"Predict method for plmm class — predict.plmm","text":"Predict method plmm class","code":""},{"path":"/reference/predict.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for plmm class — predict.plmm","text":"","code":"# S3 method for plmm predict(   object,   newX,   type = c(\"response\", \"coefficients\", \"vars\", \"nvars\", \"individual\"),   lambda,   which = 1:length(object$lambda),   no_int_X,   y,   U,   S,   eta,   covariance,   ... )"},{"path":"/reference/predict.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for plmm class — predict.plmm","text":"object object class plmm. newX Design matrix used computing predicted values requested. type character argument indicating type prediction returned. lambda numeric vector regularization parameter lambda values predictions requested. Vector indices penalty parameter lambda predictions required. default, indices returned. no_int_X Optional argument. Original design matrix (including intercept column) object. Required type == 'individual'. y Optional argument. Original continuous outcome vector object. Required type == 'individual'. U Optional argument. Eigenvectors similarity matrix object. Required type == 'individual'. S Optional argument. Eigenvalues similarity matrix object. Required type == 'individual'. eta Optional argument. Estimated $eta$ value object. Required type == 'individual'. covariance Optional argument. $q times n$ covariance matrix new old observations. Required type == 'individual'. ... Additional optional arguments","code":""},{"path":"/reference/predict.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for plmm class — predict.plmm","text":"","code":"fit <- plmm(X = admix$X, y = admix$y, lambda = c(0.05, 0.01)) head(predict(object = fit, newX = admix$X, type = 'response', lambda = 0.05)) #> [1] 1.482265 1.491049 1.137473 1.357829 2.004830 1.043942 head(predict(object = fit, newX = admix$X, type = 'vars')) #> $`0.0500` #>  Snp1  Snp3  Snp4  Snp6  Snp9 Snp10 Snp11 Snp12 Snp13 Snp15 Snp16 Snp18 Snp19  #>     1     3     4     6     9    10    11    12    13    15    16    18    19  #> Snp20 Snp22 Snp24 Snp25 Snp28 Snp33 Snp34 Snp37 Snp38 Snp41 Snp42 Snp44 Snp47  #>    20    22    24    25    28    33    34    37    38    41    42    44    47  #> Snp50 Snp51 Snp53 Snp58 Snp59 Snp63 Snp64 Snp65 Snp66 Snp68 Snp69 Snp71 Snp72  #>    50    51    53    58    59    63    64    65    66    68    69    71    72  #> Snp74 Snp79 Snp80 Snp81 Snp83 Snp85 Snp86 Snp87 Snp88 Snp90 Snp95 Snp96 Snp97  #>    74    79    80    81    83    85    86    87    88    90    95    96    97  #> Snp99  #>    99  #>  #> $`0.0100` #>   Snp1   Snp2   Snp3   Snp4   Snp5   Snp6   Snp7   Snp9  Snp10  Snp11  Snp12  #>      1      2      3      4      5      6      7      9     10     11     12  #>  Snp13  Snp15  Snp16  Snp18  Snp19  Snp20  Snp22  Snp23  Snp24  Snp25  Snp26  #>     13     15     16     18     19     20     22     23     24     25     26  #>  Snp27  Snp28  Snp29  Snp31  Snp32  Snp33  Snp34  Snp37  Snp38  Snp39  Snp40  #>     27     28     29     31     32     33     34     37     38     39     40  #>  Snp41  Snp42  Snp43  Snp44  Snp45  Snp46  Snp47  Snp48  Snp49  Snp50  Snp51  #>     41     42     43     44     45     46     47     48     49     50     51  #>  Snp53  Snp55  Snp58  Snp59  Snp60  Snp61  Snp63  Snp64  Snp65  Snp66  Snp67  #>     53     55     58     59     60     61     63     64     65     66     67  #>  Snp68  Snp69  Snp70  Snp71  Snp72  Snp73  Snp74  Snp76  Snp77  Snp79  Snp80  #>     68     69     70     71     72     73     74     76     77     79     80  #>  Snp81  Snp82  Snp83  Snp84  Snp85  Snp86  Snp87  Snp88  Snp89  Snp90  Snp91  #>     81     82     83     84     85     86     87     88     89     90     91  #>  Snp92  Snp93  Snp94  Snp95  Snp96  Snp97  Snp98  Snp99 Snp100  #>     92     93     94     95     96     97     98     99    100  #>  predict(object = fit, newX = admix$X, type = 'nvars') #> 0.0500 0.0100  #>     53     86  if (FALSE) { predict.plmm(object = fit, newX = admix$X, type = 'individual', no_int_X = admix$X, y = admix$y, U = fit$U, S = fit$S, eta = fit$eta, covariance = crossprod(admix$X)) } if (FALSE) { # Out of sample predictions are NOT improved by BLUP when X cannot be used to # estimate V n <- 210 p <- 1000 p1 <- 50 SNR <- 10  # Generate data (X unrelated to V) V <- Matrix::bdiag(matrix(0.5, n/3, n/3), matrix(0.5, n/3, n/3), matrix(0.5, n/3, n/3)) V <- as.matrix(V) diag(V) <- 1 set.seed(7) X1 <- matrix(rnorm(n * p, 0, 1), n, p) j <- 1:p s <- rep(1, times = p) b <- j <= p1 b <- b * s covX <- stats::var(X1) * (n - 1)/n beta <- b * sqrt(SNR) / sqrt(drop(crossprod(b, covX) %*% b)) Xbeta <- X1 %*% beta e <- MASS::mvrnorm(n=1, rep(0, n), V) # errors are structured y1 <- Xbeta + e  # fit the model object <- cv.plmm(X1,                   y1,                   V,                   eta_star = 1,                   type = 'individual',                   penalty = \"lasso\",                   alpha = 1,                   standardizeX = TRUE,                   standardizeRtX = TRUE,                   rotation = TRUE,                   returnX = TRUE,                   nfolds = 5) # NOTE: in-sample predictions as above in CV are fine, because V supplies the # known covariance between the outcomes used in different folds.  # generate an X2 that is similar to X1 X2 <- X1 + rnorm(nrow(X1), 0, 0.0001) covX <- stats::var(X2) * (n - 1)/n beta <- b * sqrt(SNR) / sqrt(drop(crossprod(b, covX) %*% b)) Xbeta <- X2 %*% beta e <- MASS::mvrnorm(n=1, rep(0, n), V) y2 <- Xbeta + e  # linear predictor works well linear_predictor <- predict.plmm(object$fit, newX = X2, type = 'response', lambda = object$lambda.min) drop(crossprod(linear_predictor - y2)/length(y2))  # but the blup doesn't, because `cov(t(X2), t(X1))` doesn't provide # information about `cov(y2, y1)` blup <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = cov(t(X2), t(X1)), eta = object$fit$eta)  drop(crossprod(blup - y2)/length(y2))  # in this case, cov(y2, y1) ~= V -this information improves the blup blup_V <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = V, eta = object$fit$eta)  drop(crossprod(blup_V - y2)/length(y2))  # with the null model... object$fit$beta <- matrix(0, nrow = nrow(object$fit$beta), ncol = ncol(object$fit$beta))  # ...the linear predictor is worse... linear_predictor_null <- predict.plmm(object$fit, newX = X2, type = 'response', lambda = object$lambda.min)  drop(crossprod(linear_predictor_null - y2)/length(y2))  # ...but the blup is even worse, because we are left only with a noisy # rotation of y as an estimate blup_null <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = cov(t(X2), t(X1)), eta = object$fit$eta)  drop(crossprod(blup_null - y2)/length(y2))  # again, in this case, cov(y2, y1) ~= V, which notably improves the blup blup_null_V <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = V, eta = object$fit$eta)  drop(crossprod(blup_null_V - y2)/length(y2))    # Based on this, we expect to see out of sample predictions ARE improved when # V can be estimated from X n <- 210 p <- 1000 p1 <- 50 SNR <- 10  # Generate data (X related to V) V <- Matrix::bdiag(matrix(0.5, n/3, n/3), matrix(0.5, n/3, n/3), matrix(0.5, n/3, n/3)) V <- as.matrix(V) diag(V) <- 1 set.seed(7) X1 <- t(MASS::mvrnorm(n = p, mu = rep(0, n), Sigma = V)) j <- 1:p s <- rep(1, times = p) b <- j <= p1 b <- b * s covX <- stats::var(X1) * (n - 1)/n beta <- b * sqrt(SNR) / sqrt(drop(crossprod(b, covX) %*% b)) Xbeta <- X1 %*% beta e <- MASS::mvrnorm(n=1, rep(0, n), V) y1 <- Xbeta + e  # fit the model object <- cv.plmm(X1,                   y1,                   V,                   eta_star = 1,                   type = 'individual',                   penalty = \"lasso\",                   alpha = 1,                   standardizeX = TRUE,                   standardizeRtX = TRUE,                   rotation = TRUE,                   returnX = TRUE,                   nfolds = 5)  # generate an X2 that is similar to X1 X2 <- X1 + rnorm(nrow(X1), 0, 0.0001) covX <- stats::var(X2) * (n - 1)/n beta <- b * sqrt(SNR) / sqrt(drop(crossprod(b, covX) %*% b)) Xbeta <- X2 %*% beta e <- MASS::mvrnorm(n=1, rep(0, n), V) y2 <- Xbeta + e  # linear predictor works well linear_predictor <- predict.plmm(object$fit, newX = X2, type = 'response', lambda = object$lambda.min) drop(crossprod(linear_predictor - y2)/length(y2))  # and the blup improves upon the linear predictor because # `cov(t(X2), t(X1))` ~=`cov(y2, y1)` blup <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = cov(t(X2), t(X1)), eta = object$fit$eta)  drop(crossprod(blup - y2)/length(y2))  # in this case, knowing the true(ish) cov(y2, y1) is even more beneficial than # using the version estimated from `cov(t(X2), t(X1))` blup_V <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = V, eta = object$fit$eta)  drop(crossprod(blup_V - y2)/length(y2))  # with the null model... object$fit$beta <- matrix(0, nrow = nrow(object$fit$beta), ncol = ncol(object$fit$beta))  # ...the linear predictor is worse... linear_predictor_null <- predict.plmm(object$fit, newX = X2, type = 'response', lambda = object$lambda.min)  drop(crossprod(linear_predictor_null - y2)/length(y2))  # ...but the blup is better because we still have information about # `cov(y2, y1)` ~= `cov(t(X2), t(X1))` blup_null <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = cov(t(X2), t(X1)), eta = object$fit$eta)  drop(crossprod(blup_null - y2)/length(y2))  # in this case, knowing the true(ish) cov(y2, y1) gives a more drastic # improvement than using the version estimated from `cov(t(X2), t(X1))` # because we don't have any information from the linear predictor blup_null_V <- predict.plmm(object$fit, newX = X2, type = 'individual', lambda = object$lambda.min, no_int_X = X1, y = y1, U = object$fit$U, S = object$fit$S, covariance = V, eta = object$fit$eta)  drop(crossprod(blup_null_V - y2)/length(y2)) }"},{"path":"/reference/preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess PLINK files — preprocess","title":"Preprocess PLINK files — preprocess","text":"function allows preprocess PLINK bed/bim/fam files use penalizedLMM functions. Unreliable SNPs removed missing values imptued using either snpStats, tagged, HWE mean value.","code":""},{"path":"/reference/preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess PLINK files — preprocess","text":"","code":"preprocess(prefix, dataDir, sexcheck = FALSE, na.strings = \"-9\", impute = TRUE)"},{"path":"/reference/preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess PLINK files — preprocess","text":"prefix Character argument prefix bed/bim/fam files. dataDir Directory plink files (.sexcheck files located sexcheck = TRUE) located sexcheck Logical flag whether PLINK sexcheck files incorporated. Defaults FALSE. TRUE, sexcheck files must form \"prefix.sexcheck\" na.strings snpStats. Strings .bam .fam files recoded NA. Defaults \"-9\" impute Logical flag whether imputation performed. Defaults TRUE since plmm handle missing values.","code":""},{"path":"/reference/preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess PLINK files — preprocess","text":"three element list object: genotypes filtered imputed genotypes snpMatrix object subjects rows SNPs columns. map matrix SNP data. fam matrix subject data.","code":""},{"path":"/reference/relatedness_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a relatedness matrix — relatedness_mat","title":"Calculate a relatedness matrix — relatedness_mat","text":"function allows generate n n genetic relatedness matrix. numeric matrix supplied, RRM (Hayes, 2009) used computed XX'/p, X standardized. character argument describes location prefix PLINK bed/bim/bam files supplied, GRM computed using GCTA method SNPrelate, unless another method specified optional argument.","code":""},{"path":"/reference/relatedness_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a relatedness matrix — relatedness_mat","text":"","code":"relatedness_mat(X, ...)"},{"path":"/reference/relatedness_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a relatedness matrix — relatedness_mat","text":"X Either numeric matrix genotypes (subjects rows, SNPs columns), character prefix PLINK bed/bim/fam files. ... Optional arguments case character prefix specified.","code":""},{"path":"/reference/relatedness_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a relatedness matrix — relatedness_mat","text":"","code":"RRM <- relatedness_mat(X = admix$X)"},{"path":"/reference/rotate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute transformed X and y for subsequent plmm rescaling and fitting — rotate_data","title":"Compute transformed X and y for subsequent plmm rescaling and fitting — rotate_data","text":"function allows fit linear mixed model via non-convex penalized maximum likelihood.","code":""},{"path":"/reference/rotate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute transformed X and y for subsequent plmm rescaling and fitting — rotate_data","text":"","code":"rotate_data(X, y, K = NULL, eta_star)"},{"path":"/reference/rotate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute transformed X and y for subsequent plmm rescaling and fitting — rotate_data","text":"X Design matrix. May include clinical covariates non-SNP data. y Continuous outcome vector. K Estimated known similarity matrix. default, K realized relationship matrix, \\(\\frac{1}{p}XX^T\\), \\(p\\) number columns X eta_star Optional arg input specific eta term rather estimate data. v known matrix, 1.","code":""},{"path":"/reference/rotate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute transformed X and y for subsequent plmm rescaling and fitting — rotate_data","text":"","code":"std_X <- scale(admix$X) K <- relatedness_mat(std_X) rotated_dat <- rotate_data(std_X, admix$y, K)"},{"path":"/reference/scale_varp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate scale by the population standard deviation, without centering — scale_varp","title":"Calculate scale by the population standard deviation, without centering — scale_varp","text":"function allows scale vectors matrix population standard deviation without centering; assume sample population.","code":""},{"path":"/reference/scale_varp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate scale by the population standard deviation, without centering — scale_varp","text":"","code":"scale_varp(X)"},{"path":"/reference/scale_varp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate scale by the population standard deviation, without centering — scale_varp","text":"X numeric matrix","code":""},{"path":"/reference/scale_varp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate scale by the population standard deviation, without centering — scale_varp","text":"","code":"M <- matrix(rnorm(25), 5, 5) head(M) #>            [,1]        [,2]       [,3]       [,4]        [,5] #> [1,] -1.6843140  0.80356747 -0.2157463  0.3879396  0.09415532 #> [2,] -0.1669666  0.32817995 -0.7635488  0.2616156  0.01444494 #> [3,] -1.8283801  0.26401899 -1.1602057  0.2685845 -0.62016370 #> [4,] -0.4245068 -0.05304587 -0.1645374 -0.4751506 -1.28291514 #> [5,]  0.3391949 -1.90820455 -0.2797211 -2.0373461  1.73450653 M_scaled <- scale_varp(M) head(M_scaled) #> $scale_vals #> [1] 1.1404406 0.9452182 0.6451274 0.9661909 1.0047946 #>  #> $scaled_X #>            [,1]        [,2]       [,3]       [,4]        [,5] #> [1,] -1.4768975  0.85013965 -0.3344243  0.4015144  0.09370604 #> [2,] -0.1464053  0.34720020 -1.1835628  0.2707701  0.01437601 #> [3,] -1.6032225  0.27932068 -1.7984133  0.2779828 -0.61720445 #> [4,] -0.3722305 -0.05612024 -0.2550464 -0.4917771 -1.27679341 #> [5,]  0.2974245 -2.01879793 -0.4335904 -2.1086371  1.72622993 #> attr(,\"scaled:scale\") #> [1] 1.1404406 0.9452182 0.6451274 0.9661909 1.0047946 #>   X_scaled <- scale_varp(admix$X) admix$X[1:5, 1:7]; X_scaled[1:5, 1:7] #>      Snp1 Snp2 Snp3 Snp4 Snp5 Snp6 Snp7 #> [1,]    0    0    0    0    0    0    1 #> [2,]    0    0    0    0    0    1    0 #> [3,]    0    0    0    0    0    1    1 #> [4,]    0    0    0    0    0    0    0 #> [5,]    1    0    0    1    0    0    1 #> Error in X_scaled[1:5, 1:7]: incorrect number of dimensions #>      Snp1 Snp2 Snp3 Snp4 Snp5 Snp6 Snp7 #> [1,]    0    0    0    0    0    0    1 #> [2,]    0    0    0    0    0    1    0 #> [3,]    0    0    0    0    0    1    1 #> [4,]    0    0    0    0    0    0    0 #> [5,]    1    0    0    1    0    0    1"},{"path":"/reference/setup_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sequence of lambda values — setup_lambda","title":"Compute sequence of lambda values — setup_lambda","text":"function allows compute sequence lambda values plmm models.","code":""},{"path":"/reference/setup_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sequence of lambda values — setup_lambda","text":"","code":"setup_lambda(   X,   y,   alpha,   lambda.min,   nlambda,   penalty.factor,   intercept = TRUE )"},{"path":"/reference/setup_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sequence of lambda values — setup_lambda","text":"X Design matrix includes intercept column present. May include clinical covariates non-SNP data. y Continuous outcome vector. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda.min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. value lambda.min = 0 supported. nlambda desired number lambda values sequence generated. penalty.factor multiplicative factor penalty applied coefficient. supplied, penalty.factor must numeric vector length equal number columns X. purpose penalty.factor apply differential penalization coefficients thought likely others model. particular, penalty.factor can 0, case coefficient always model without shrinkage. intercept Logical: X contain intercept column? Defaults TRUE.","code":""},{"path":"/reference/setup_lambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute sequence of lambda values — setup_lambda","text":"","code":"RRM <- relatedness_mat(X = scale(admix$X)) fit <- plmm_lasso(X = admix$X, y = admix$y, K = RRM, p1 = 10) (setup_lambda(admix$X, admix$y, alpha = 0.1, nlambda = 10,  penalty.factor = fit$fit$penalty.factor)) # use default lambda.min #>  [1] 7.499211317 3.480825551 1.615656101 0.749921132 0.348082555 0.161565610 #>  [7] 0.074992113 0.034808256 0.016156561 0.007499211"},{"path":"/reference/sim_environ_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a vector of environmental confounding effects — sim_environ_eff","title":"Simulate a vector of environmental confounding effects — sim_environ_eff","text":"function allows simulate environmental confounding effect. used sim_ps_dat(), scales generated vector order comply user specified desired variance outcome attributable environmental effect.","code":""},{"path":"/reference/sim_environ_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a vector of environmental confounding effects — sim_environ_eff","text":"","code":"sim_environ_eff(structureGamma, J)"},{"path":"/reference/sim_environ_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a vector of environmental confounding effects — sim_environ_eff","text":"structureGamma character argument describing desired structure. J Number subpopulations.","code":""},{"path":"/reference/sim_environ_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a vector of environmental confounding effects — sim_environ_eff","text":"","code":"sim_environ_eff(structureGamma = \"linear_concordant\", J = 3) #> [1] 3 2 1"},{"path":"/reference/sim_ps_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data with population structure — sim_ps_dat","title":"Simulate data with population structure — sim_ps_dat","text":"function allows simulate structured genetic data (SNP) unobserved environmental confounding effect.","code":""},{"path":"/reference/sim_ps_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data with population structure — sim_ps_dat","text":"","code":"sim_ps_dat(   n = 200,   p = 1000,   p1 = floor(p/2),   nJ = rep(50, 4),   structureX = \"indep_subpops\",   Fst = NULL,   inbr = \"heterogeneous\",   structureGamma = c(\"dichotomous_discordant\"),   eta = 0.8,   xi = 0,   standardizeX = TRUE,   structureX_other = NULL,   sampleCols = TRUE,   B0 )"},{"path":"/reference/sim_ps_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data with population structure — sim_ps_dat","text":"n Number observations/samples simulate. Defaults 200. p Number SNPs simulate. Defaults 1000. p1 Number SNPs causal. Defaults floor(p/2). nJ Number observations subpopulation. length nJ corresponds number subpopulations. Defaults rep(50, 4). structureX Type structure simulate. Defaults indep_subpops. Fst desired final FST admixed individuals. Ranges 0 1. high FST implies greater differentiation among populations. Defaults 0.1 structureX = 1d_linear 0.2 structureX = indep_subpops. Otherwise defaults NULL. inbr Indicates whether desired inbreeding homogeneous heterogeneous. Defaults heterogeneous. structureGamma desired structure environmental confounding effect. Defaults 'dichotomous_discordant' eta desired proportion variance outcome attributable causal SNP effects. words, SNR. xi desired proportion non-signal variance outcome attributable unobserved environmental confounding effects. standardizeX generated X matrix standardized? Defaults TRUE. structureX_other structureX == \"\", matrix SnpMatrix object subjects rows SNPs columns used generate pseudophenotypes must supplied . sampleCols logical flag whether columns resultant X matrix scrambled. may desirable causal SNPs change one simulation next. Defaults TRUE. B0 Optional. Additional intercept value.","code":""},{"path":"/reference/sim_ps_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data with population structure — sim_ps_dat","text":"list 7 elements: matrix SNP data (X), single-column matrix outcome values (y), single column matrix 'env', vector coefficients (beta), matrix Z values allocating environmental effects among subjects (Z), vector numeric values representing environmental effects (gamma), type structure used SNP data (structureX)","code":""},{"path":"/reference/sim_ps_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data with population structure — sim_ps_dat","text":"","code":"sim_dat <- sim_ps_dat(structureX = \"1d_linear\") example_fit <- plmm(sim_dat$X, sim_dat$y, K = sim_dat$X%*%t(sim_dat$X))"},{"path":"/reference/sim_ps_x.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an X matrix with population structure — sim_ps_x","title":"Simulate an X matrix with population structure — sim_ps_x","text":"function allows simulate structured genetic data (SNP).","code":""},{"path":"/reference/sim_ps_x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an X matrix with population structure — sim_ps_x","text":"","code":"sim_ps_x(   n,   nJ,   p,   structureX = c(\"admixture\", \"indep_subpops\", \"1d_linear\", \"1d_circular\",     \"independent\", \"other\"),   Fst = NULL,   inbr = c(\"homogeneous\", \"heterogeneous\"),   standardizeX = TRUE,   plot = FALSE,   structureX_other = NULL,   sampleCols = TRUE )"},{"path":"/reference/sim_ps_x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an X matrix with population structure — sim_ps_x","text":"n Number observations/samples simulate. nJ Number observations subpopulation. length nJ corresponds number subpopulations. p Number SNPs simulate. structureX Type structure simulate. Fst desired final FST admixed individuals. Ranges 0 1. high Fst implies greater differentiation among populations. Defaults 0.1 structureX = 1d_linear 0.2 structureX = indep_subpops. Otherwise defaults NULL. inbr Indicates whether desired inbreeding homogeneous heterogeneous. Defaults heterogeneous. standardizeX generated X matrix standardized? Defaults TRUE. plot plot kinship matrix generated? Defaults FALSE. structureX_other structureX == \"\", matrix SnpMatrix object subjects rows SNPs columns used generate pseudophenotypes must supplied . sampleCols logical flag whether columns resultant X matrix scrambled. may desirable causal SNPs change one simulation next. Defaults TRUE.","code":""},{"path":"/reference/sim_ps_x.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an X matrix with population structure — sim_ps_x","text":"","code":"sim_X <- sim_ps_x(n = 200,  nJ = rep(100, 2),  p = 1000,   structureX = \"indep_subpops\",   inbr = \"heterogeneous\")"},{"path":"/reference/summary.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"A summary method for the plmm class — summary.plmm","title":"A summary method for the plmm class — summary.plmm","text":"summary method plmm class","code":""},{"path":"/reference/summary.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A summary method for the plmm class — summary.plmm","text":"","code":"# S3 method for plmm summary(object, quiet = FALSE)"},{"path":"/reference/summary.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A summary method for the plmm class — summary.plmm","text":"object object class plmm quiet logical indicating whether console output desired. Defaults FALSE.","code":""},{"path":"/reference/summary.plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A summary method for the plmm class — summary.plmm","text":"list containing:","code":""},{"path":"/reference/summary.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A summary method for the plmm class — summary.plmm","text":"","code":"fit <- plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) example <- summary.plmm(fit) #> Error in summary.plmm(fit): could not find function \"summary.plmm\" #TODO: Sept. 14, 2022 - need a more sophisticated way to select the 'best' lambda value"},{"path":"/reference/unscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Unscale coefficient values — unscale","title":"Unscale coefficient values — unscale","text":"function allows unscale coefficient values based attributes X.","code":""},{"path":"/reference/unscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unscale coefficient values — unscale","text":"","code":"unscale(b, X, scaled_X, intercept = TRUE)"},{"path":"/reference/unscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unscale coefficient values — unscale","text":"b p x nlambda matrix standardized coefficient path values. X Unscaled, rotated design matrix intercept column present. Necessary properly defining dimensions beta cases singular columns present. scaled_X Scaled, rotated design matrix. Must include attributes 'center', 'scale', 'nonsingular' corresponding non-intercept variables. intercept Logical flag whether intercept row included b, , coefficient accounts mean original y value rotated scale.","code":""},{"path":"/reference/unscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unscale coefficient values — unscale","text":"","code":"admix$K <- (admix$X%*%t(admix$X))/ncol(admix$X) # create an estimated covariance matrix  fit <- plmm(X = admix$X, y = admix$y, K = admix$K) unscaled_betas <- unscale(b = fit$beta, X = admix$X, scaled_X = fit$SUX, intercept = TRUE)"},{"path":"/reference/unstandardize.html","id":null,"dir":"Reference","previous_headings":"","what":"Unstandardize coefficient values — unstandardize","title":"Unstandardize coefficient values — unstandardize","text":"function allows unstandardize coefficient values based attributes X.","code":""},{"path":"/reference/unstandardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unstandardize coefficient values — unstandardize","text":"","code":"unstandardize(b, X, std_X, intercept = TRUE)"},{"path":"/reference/unstandardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unstandardize coefficient values — unstandardize","text":"b p x nlambda matrix standardized coefficient path values. X Original, non-standardized design matrix without intercept column. Necessary properly defining dimensions beta cases singular columns present. std_X Standardized design matrix. Must include attributes 'center', 'scale', 'nonsingular' corresponding non-intercept variables. intercept Logical flag whether intercept row included b, , coefficient accounts mean original y value rotated scale.","code":""},{"path":"/reference/unstandardize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unstandardize coefficient values — unstandardize","text":"","code":"admix$K <- (admix$X%*%t(admix$X))/ncol(admix$X) # create an estimated covariance matrix  fit <- plmm(X = admix$X, y = admix$y, K = admix$K) # TODO: this throws an error: new_betas <- unstandardize(b = fit$beta, X = admix$X, std_X = scale(admix$X))"},{"path":"/reference/untransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform coefficient values back to the original scale — untransform","title":"Untransform coefficient values back to the original scale — untransform","text":"function unwinds steps standardization process obtain coefficient values original scale. called plmm().","code":""},{"path":"/reference/untransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform coefficient values back to the original scale — untransform","text":"","code":"untransform(res_b, ns, X, std_X, SUX, std_SUX)"},{"path":"/reference/untransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform coefficient values back to the original scale — untransform","text":"res_b values returned 'beta' argument ncvfit() object ns indices non-singular columns ORIGINAL design matrix X original design matrix (intercept) std_X standardized design matrix rotation; attributes 'scale', 'center', 'nonsingular' SUX rotated design matrix (intercept) std_SUX standardized design matrix rotation; attribute 'scale'","code":""},{"path":"/reference/varp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the population variance — varp","title":"Calculate the population variance — varp","text":"function allows calculate population variance; assume sample population.","code":""},{"path":"/reference/varp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the population variance — varp","text":"","code":"varp(x)"},{"path":"/reference/varp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the population variance — varp","text":"x numeric vector","code":""},{"path":"/reference/varp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the population variance — varp","text":"","code":"v <- rnorm(5) varp(v) #> [1] 0.3099932"}]
